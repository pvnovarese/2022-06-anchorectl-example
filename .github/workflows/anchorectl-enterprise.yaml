# This workflow checks out code, builds an image, performs a container image
# scan, evaluates the image, and promotes it if it passes.

name: Scan and Evaluate with anchorectl

on: 
  #push:
  #  branches:
  #    - main
  workflow_dispatch:
    inputs:
      mode:
        description: 'Manual Build'  
        
jobs:

  Build-Scan-Promote:
    runs-on: ubuntu-latest
    env:
      ANCHORECTL_ANCHORE_USER: ${{ secrets.ANCHORE_CLI_USER }}
      ANCHORECTL_ANCHORE_PASSWORD: ${{ secrets.ANCHORE_CLI_PASS }}
      ANCHORECTL_ANCHORE_URL: ${{ secrets.ANCHORECTL_ANCHORE_URL }}
      ANCHORE_CLI_USER: ${{ secrets.ANCHORE_CLI_USER }}
      ANCHORE_CLI_PASS: ${{ secrets.ANCHORE_CLI_PASS }}
      ANCHORE_CLI_URL: ${{ secrets.ANCHORE_CLI_URL }}
      IMAGE_REGISTRY: ghcr.io
    steps:
    
    # we'll use the tag with the SHA for testing, once we are satisfied we'll use the tag with the
    # branch name and then actually push that to the registry (the SHA tag never gets pushed)
    - name: "Set environmental variables"
      run: |
        echo "IMAGE_SHA=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_SHA}" >> $GITHUB_ENV
        echo "IMAGE=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
    - name: Checkout Code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: build local container
      uses: docker/build-push-action@v2
      with:
        tags: ${{ env.IMAGE_SHA }}
        push: false
        load: true
        
    - name: Scan image
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ env.IMAGE_SHA }}
        fail-build: false
        severity-cutoff: critical
        acs-report-enable: true
        
    - name: Inspect SARIF report
      run: cat ${{ steps.scan.outputs.sarif }}

    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
                
    - name: Install Anchore CLI Tools
      run: |
        sudo apt-get install python3-pip
        pip install anchorecli
        mkdir -p $HOME/.local/bin
        curl https://anchorectl-releases.s3-us-west-2.amazonaws.com/v0.2.0/anchorectl_0.2.0_linux_amd64.tar.gz | tar xzvf - -C $HOME/.local/bin/
        chmod 0755 $HOME/.local/bin/anchorectl
        export PATH="$HOME/.local/bin/:$PATH"
        
    - name: Verify Anchore Ready and Reachable
      run: |
        anchorectl system status 
        
    - name: Generate SBOM and Push to Anchore
      run: |
        anchorectl sbom upload --wait --dockerfile ./Dockerfile ${IMAGE_SHA}
        
    - name: Pull Vulnerability List
      run: |
        anchorectl image vuln ${IMAGE_SHA} all | tee anchore-vuln.txt
    - name: Pull Policy Evaluation
      run: |
        set -o pipefail
        # we have to set pipefail so that we can still gate on the evaluation, otherwise piping into tee will mask the failure
        # also note that for this step we use anchore-cli, anchorectl doesn't yet have "evaluate check" implemented as of 0.1.4
        anchore-cli evaluate check --detail ${IMAGE_SHA} | tee anchore-policy.txt

    - name: Re-Tag Image
      run: |
        docker tag ${IMAGE_SHA} ${IMAGE}

    - name: Login to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      
    - name: Push Docker Image
      run: |
        docker push ${IMAGE}
        
    - name: Add Promoted Image to Anchore Queue
      run: |
        anchorectl image add --noautosubscribe ${IMAGE}
        anchorectl image wait ${IMAGE}
    
    # still need anchore-cli for subscription operations
    - name: Purge Unneeded Evaluation
      run: |
        anchore-cli subscription list --full | grep ${GITHUB_SHA} | awk '{print $4}' | xargs -n 1 anchore-cli subscription del
        anchorectl image delete ${IMAGE_SHA}
    
    ## optional, if you want continuous re-evaluations
    ## still need anchore-cli for subscription operations
    #- name: Activate Subscriptions
    #    anchore-cli subscription activate policy_eval ${IMAGE}
    #    anchore-cli subscription activate vuln_update ${IMAGE}    
        
    - name: Archive Vulnerabilities and Evaluation
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: evaluation-report
        path: anchore-*.txt
        retention-days: 14
